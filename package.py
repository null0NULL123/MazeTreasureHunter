import numpy as np
import copy

key_code = 0
frame_count = 1
direct_parameter = 1
cross_parameter = 2
turn_parameter = 3
# direct_parameter=0.5
# cross_parameter=1
# turn_parameter=1
capture_parameter = 4
maze_parameter = 206
photo_number = 3
size = 0
begin = True
end = True
matrix = 0
mat_list = []
mat_id = 2
picture = 0
pic_error = 0
pic_list = []
PathOriginal = []
t_path = []
t_path_corner = []
pathx = 0
pathy = 0
# 0未识别，正负1 2表示真假，正负3从镜像可以判断颜色而不知真伪，
# 4识别不出，56789可以自行设置功能
# 以此对于dfs的最好的结果进行筛选
treasure = []
t_len = len(treasure)
t_tranform = []
t_visited = []
t_distances = []
t_direction = []
path_temp = []
t_wall = []
t_next = -1
t_last = -1
# 用来判断复位和起点
t_score = 0
t_dir = 0
t_temp = copy.deepcopy(t_last)
t_first1 = True
t_first2 = True
t_fake = False
# t_true1=True
# t_true2=True
t_error = 0
t_startx = 0
t_starty = 0
t_endx = 18
t_endy = 0
t_self1 = 0
t_self2 = 0
t_score = 0
# t_traversal=0
# 0未知，1己方，-1对方,标号表示的是访问的象限及其对面
# True表示识别到假宝藏，False表示未识别到

# from main import temp
startx = 0
starty = 0
maze_endx = 18
maze_endy = 0
maze_direct = []
predecessors = []
distances = []

dfs_p = []
dfs_distances = float("inf")
dfs_index = 0
dfs_visited = []
dfs_last = t_last
inf_shortest = True
inf_parameter = 0
inf_p = []
inf_distances = []
inf_index = []
inf_visited = []
permutations = []

maze = np.loadtxt("maze.txt", dtype=int)
m = len(maze)
n = len(maze[0])
maze_visited = maze.copy()
t_sets = [
    [(2, 2), (2, 9), (3, 4), (4, 8), (5, 1), (6, 5), (7, 0), (7, 7)],
    [(1, 8), (2, 9), (3, 0), (3, 4), (6, 5), (6, 9), (7, 0), (8, 1)],
    [(1, 8), (2, 2), (3, 4), (4, 8), (5, 1), (6, 5), (7, 7), (8, 1)],
    [(1, 8), (2, 2), (2, 9), (3, 4), (6, 5), (7, 0), (7, 7), (8, 1)],
    [(2, 9), (3, 0), (3, 4), (4, 8), (5, 1), (6, 5), (6, 9), (7, 0)],
    [(1, 8), (2, 2), (2, 9), (3, 0), (6, 9), (7, 0), (7, 7), (8, 1)],
    [(2, 2), (2, 9), (3, 0), (4, 8), (5, 1), (6, 9), (7, 0), (7, 7)],
    [(1, 8), (3, 0), (3, 4), (4, 8), (5, 1), (6, 5), (6, 9), (8, 1)],
    [(1, 8), (2, 2), (3, 0), (4, 8), (5, 1), (6, 9), (7, 7), (8, 1)],
]
t_pos = [
    (0, 2),
    (0, 4),
    (0, 5),
    (0, 9),
    (1, 3),
    (1, 6),
    (1, 7),
    (1, 8),
    (2, 2),
    (2, 5),
    (2, 8),
    (2, 9),
    (3, 0),
    (3, 3),
    (3, 4),
    (3, 8),
    (3, 9),
    (4, 7),
    (4, 8),
    (9, 7),
    (9, 5),
    (9, 4),
    (9, 0),
    (8, 6),
    (8, 3),
    (8, 2),
    (8, 1),
    (7, 7),
    (7, 4),
    (7, 1),
    (7, 0),
    (6, 9),
    (6, 6),
    (6, 5),
    (6, 1),
    (6, 0),
    (5, 2),
    (5, 1),
]
t_wall_pos = [
    [0, 5],
    [1, 3],
    [1, 6],
    [1, 7],
    [2, 6],
    [2, 8],
    [3, 3],
    [3, 8],
    [3, 9],
    [9, 4],
    [8, 6],
    [8, 3],
    [8, 2],
    [7, 3],
    [7, 1],
    [6, 6],
    [6, 1],
    [6, 0],
]
t_wall_maze = [
    [18, 10],
    [16, 6],
    [16, 12],
    [16, 14],
    [14, 10],
    [14, 12],
    [14, 16],
    [12, 6],
    [12, 16],
    [12, 18],
    [0, 8],
    [2, 12],
    [2, 6],
    [2, 4],
    [4, 8],
    [4, 6],
    [4, 2],
    [6, 12],
    [6, 2],
    [6, 0],
]
corner = [
    [16, 16],
    [14, 4],
    [14, 18],
    [12, 0],
    [12, 8],
    [10, 16],
    [2, 2],
    [4, 14],
    [4, 0],
    [6, 18],
    [6, 10],
    [8, 2],
]
corner_pos = [
    [1, 8],
    [2, 2],
    [2, 9],
    [3, 0],
    [3, 4],
    [4, 8],
    [8, 1],
    [7, 7],
    [7, 0],
    [6, 9],
    [6, 5],
    [5, 1],
]
cross = [
    (10, 0),
    (0, 2),
    (4, 4),
    (12, 4),
    (10, 4),
    (0, 6),
    (6, 6),
    (8, 6),
    (10, 6),
    (14, 6),
    (2, 8),
    (2, 10),
    (16, 8),
    (16, 10),
    (4, 12),
    (8, 12),
    (10, 12),
    (12, 12),
    (18, 12),
    (8, 14),
    (6, 14),
    (14, 14),
    (18, 16),
    (8, 18),
]
r_list = [
    [
        [-0.0, -43.0, -40.0, -57.0, -44.0, -48.0, -49.0, -36.0, -65.0, -62.0],
        [-43.0, -0.0, -41.0, -60.0, -47.0, -37.0, -32.0, -39.0, -68.0, -65.0],
        [-40.0, -41.0, -0.0, -45.0, -32.0, -18.0, -31.0, -24.0, -39.0, -36.0],
        [-57.0, -60.0, -45.0, -0.0, -27.0, -53.0, -66.0, -31.0, -32.0, -49.0],
        [-44.0, -47.0, -32.0, -27.0, -0.0, -40.0, -53.0, -18.0, -37.0, -48.0],
        [-48.0, -37.0, -18.0, -53.0, -40.0, -0.0, -27.0, -32.0, -47.0, -44.0],
        [-49.0, -32.0, -31.0, -66.0, -53.0, -27.0, -0.0, -45.0, -60.0, -57.0],
        [-36.0, -39.0, -24.0, -31.0, -18.0, -32.0, -45.0, -0.0, -41.0, -40.0],
        [-65.0, -68.0, -39.0, -32.0, -37.0, -47.0, -60.0, -41.0, -0.0, -43.0],
        [-62.0, -65.0, -36.0, -49.0, -48.0, -44.0, -57.0, -40.0, -43.0, -0.0],
    ],
    [
        [-0.0, -45.0, -49.0, -45.0, -36.0, -40.0, -31.0, -57.0, -53.0, -62.0],
        [-45.0, -0.0, -10.0, -32.0, -41.0, -27.0, -36.0, -62.0, -58.0, -53.0],
        [-49.0, -10.0, -0.0, -36.0, -45.0, -31.0, -40.0, -66.0, -62.0, -57.0],
        [-45.0, -32.0, -36.0, -0.0, -23.0, -19.0, -28.0, -40.0, -36.0, -31.0],
        [-36.0, -41.0, -45.0, -23.0, -0.0, -24.0, -19.0, -31.0, -27.0, -40.0],
        [-40.0, -27.0, -31.0, -19.0, -24.0, -0.0, -23.0, -45.0, -41.0, -36.0],
        [-31.0, -36.0, -40.0, -28.0, -19.0, -23.0, -0.0, -36.0, -32.0, -45.0],
        [-57.0, -62.0, -66.0, -40.0, -31.0, -45.0, -36.0, -0.0, -10.0, -49.0],
        [-53.0, -58.0, -62.0, -36.0, -27.0, -41.0, -32.0, -10.0, -0.0, -45.0],
        [-62.0, -53.0, -57.0, -31.0, -40.0, -36.0, -45.0, -49.0, -45.0, -0.0],
    ],
    [
        [-0.0, -45.0, -43.0, -36.0, -44.0, -48.0, -40.0, -65.0, -53.0, -62.0],
        [-45.0, -0.0, -28.0, -41.0, -49.0, -23.0, -27.0, -56.0, -58.0, -53.0],
        [-43.0, -28.0, -0.0, -39.0, -47.0, -37.0, -41.0, -68.0, -56.0, -65.0],
        [-36.0, -41.0, -39.0, -0.0, -18.0, -32.0, -24.0, -41.0, -27.0, -40.0],
        [-44.0, -49.0, -47.0, -18.0, -0.0, -40.0, -32.0, -37.0, -23.0, -48.0],
        [-48.0, -23.0, -37.0, -32.0, -40.0, -0.0, -18.0, -47.0, -49.0, -44.0],
        [-40.0, -27.0, -41.0, -24.0, -32.0, -18.0, -0.0, -39.0, -41.0, -36.0],
        [-65.0, -56.0, -68.0, -41.0, -37.0, -47.0, -39.0, -0.0, -28.0, -43.0],
        [-53.0, -58.0, -56.0, -27.0, -23.0, -49.0, -41.0, -28.0, -0.0, -45.0],
        [-62.0, -53.0, -65.0, -40.0, -48.0, -44.0, -36.0, -43.0, -45.0, -0.0],
    ],
    [
        [-0.0, -45.0, -43.0, -57.0, -36.0, -40.0, -49.0, -65.0, -53.0, -62.0],
        [-45.0, -0.0, -28.0, -62.0, -41.0, -27.0, -10.0, -56.0, -58.0, -53.0],
        [-43.0, -28.0, -0.0, -60.0, -39.0, -41.0, -32.0, -68.0, -56.0, -65.0],
        [-57.0, -62.0, -60.0, -0.0, -31.0, -45.0, -66.0, -32.0, -10.0, -49.0],
        [-36.0, -41.0, -39.0, -31.0, -0.0, -24.0, -45.0, -41.0, -27.0, -40.0],
        [-40.0, -27.0, -41.0, -45.0, -24.0, -0.0, -31.0, -39.0, -41.0, -36.0],
        [-49.0, -10.0, -32.0, -66.0, -45.0, -31.0, -0.0, -60.0, -62.0, -57.0],
        [-65.0, -56.0, -68.0, -32.0, -41.0, -39.0, -60.0, -0.0, -28.0, -43.0],
        [-53.0, -58.0, -56.0, -10.0, -27.0, -41.0, -62.0, -28.0, -0.0, -45.0],
        [-62.0, -53.0, -65.0, -49.0, -40.0, -36.0, -57.0, -43.0, -45.0, -0.0],
    ],
    [
        [-0.0, -49.0, -31.0, -36.0, -44.0, -48.0, -40.0, -45.0, -57.0, -62.0],
        [-49.0, -0.0, -40.0, -45.0, -53.0, -27.0, -31.0, -36.0, -66.0, -57.0],
        [-31.0, -40.0, -0.0, -19.0, -23.0, -31.0, -23.0, -28.0, -36.0, -45.0],
        [-36.0, -45.0, -19.0, -0.0, -18.0, -32.0, -24.0, -23.0, -31.0, -40.0],
        [-44.0, -53.0, -23.0, -18.0, -0.0, -40.0, -32.0, -31.0, -27.0, -48.0],
        [-48.0, -27.0, -31.0, -32.0, -40.0, -0.0, -18.0, -23.0, -53.0, -44.0],
        [-40.0, -31.0, -23.0, -24.0, -32.0, -18.0, -0.0, -19.0, -45.0, -36.0],
        [-45.0, -36.0, -28.0, -23.0, -31.0, -23.0, -19.0, -0.0, -40.0, -31.0],
        [-57.0, -66.0, -36.0, -31.0, -27.0, -53.0, -45.0, -40.0, -0.0, -49.0],
        [-62.0, -57.0, -45.0, -40.0, -48.0, -44.0, -36.0, -31.0, -49.0, -0.0],
    ],
    [
        [-0.0, -45.0, -43.0, -57.0, -45.0, -31.0, -49.0, -65.0, -53.0, -62.0],
        [-45.0, -0.0, -28.0, -62.0, -32.0, -36.0, -10.0, -56.0, -58.0, -53.0],
        [-43.0, -28.0, -0.0, -60.0, -46.0, -34.0, -32.0, -68.0, -56.0, -65.0],
        [-57.0, -62.0, -60.0, -0.0, -40.0, -36.0, -66.0, -32.0, -10.0, -49.0],
        [-45.0, -32.0, -46.0, -40.0, -0.0, -28.0, -36.0, -34.0, -36.0, -31.0],
        [-31.0, -36.0, -34.0, -36.0, -28.0, -0.0, -40.0, -46.0, -32.0, -45.0],
        [-49.0, -10.0, -32.0, -66.0, -36.0, -40.0, -0.0, -60.0, -62.0, -57.0],
        [-65.0, -56.0, -68.0, -32.0, -34.0, -46.0, -60.0, -0.0, -28.0, -43.0],
        [-53.0, -58.0, -56.0, -10.0, -36.0, -32.0, -62.0, -28.0, -0.0, -45.0],
        [-62.0, -53.0, -65.0, -49.0, -31.0, -45.0, -57.0, -43.0, -45.0, -0.0],
    ],
    [
        [-0.0, -43.0, -49.0, -45.0, -44.0, -48.0, -31.0, -57.0, -65.0, -62.0],
        [-43.0, -0.0, -32.0, -46.0, -47.0, -37.0, -34.0, -60.0, -68.0, -65.0],
        [-49.0, -32.0, -0.0, -36.0, -53.0, -27.0, -40.0, -66.0, -60.0, -57.0],
        [-45.0, -46.0, -36.0, -0.0, -31.0, -23.0, -28.0, -40.0, -34.0, -31.0],
        [-44.0, -47.0, -53.0, -31.0, -0.0, -40.0, -23.0, -27.0, -37.0, -48.0],
        [-48.0, -37.0, -27.0, -23.0, -40.0, -0.0, -31.0, -53.0, -47.0, -44.0],
        [-31.0, -34.0, -40.0, -28.0, -23.0, -31.0, -0.0, -36.0, -46.0, -45.0],
        [-57.0, -60.0, -66.0, -40.0, -27.0, -53.0, -36.0, -0.0, -32.0, -49.0],
        [-65.0, -68.0, -60.0, -34.0, -37.0, -47.0, -46.0, -32.0, -0.0, -43.0],
        [-62.0, -65.0, -57.0, -31.0, -48.0, -44.0, -45.0, -49.0, -43.0, -0.0],
    ],
    [
        [-0.0, -45.0, -31.0, -36.0, -44.0, -48.0, -40.0, -45.0, -53.0, -62.0],
        [-45.0, -0.0, -36.0, -41.0, -49.0, -23.0, -27.0, -32.0, -58.0, -53.0],
        [-31.0, -36.0, -0.0, -19.0, -23.0, -31.0, -23.0, -28.0, -32.0, -45.0],
        [-36.0, -41.0, -19.0, -0.0, -18.0, -32.0, -24.0, -23.0, -27.0, -40.0],
        [-44.0, -49.0, -23.0, -18.0, -0.0, -40.0, -32.0, -31.0, -23.0, -48.0],
        [-48.0, -23.0, -31.0, -32.0, -40.0, -0.0, -18.0, -23.0, -49.0, -44.0],
        [-40.0, -27.0, -23.0, -24.0, -32.0, -18.0, -0.0, -19.0, -41.0, -36.0],
        [-45.0, -32.0, -28.0, -23.0, -31.0, -23.0, -19.0, -0.0, -36.0, -31.0],
        [-53.0, -58.0, -32.0, -27.0, -23.0, -49.0, -41.0, -36.0, -0.0, -45.0],
        [-62.0, -53.0, -45.0, -40.0, -48.0, -44.0, -36.0, -31.0, -45.0, -0.0],
    ],
    [
        [-0.0, -45.0, -43.0, -45.0, -44.0, -48.0, -31.0, -65.0, -53.0, -62.0],
        [-45.0, -0.0, -28.0, -32.0, -49.0, -23.0, -36.0, -56.0, -58.0, -53.0],
        [-43.0, -28.0, -0.0, -46.0, -47.0, -37.0, -34.0, -68.0, -56.0, -65.0],
        [-45.0, -32.0, -46.0, -0.0, -31.0, -23.0, -28.0, -34.0, -36.0, -31.0],
        [-44.0, -49.0, -47.0, -31.0, -0.0, -40.0, -23.0, -37.0, -23.0, -48.0],
        [-48.0, -23.0, -37.0, -23.0, -40.0, -0.0, -31.0, -47.0, -49.0, -44.0],
        [-31.0, -36.0, -34.0, -28.0, -23.0, -31.0, -0.0, -46.0, -32.0, -45.0],
        [-65.0, -56.0, -68.0, -34.0, -37.0, -47.0, -46.0, -0.0, -28.0, -43.0],
        [-53.0, -58.0, -56.0, -36.0, -23.0, -49.0, -32.0, -28.0, -0.0, -45.0],
        [-62.0, -53.0, -65.0, -31.0, -48.0, -44.0, -45.0, -43.0, -45.0, -0.0],
    ],
]
greed_rewards = [
    -202.1657800000186,
    -190.55715999993689,
    -204.0711999999977,
    -209.91658000005918,
    -171.39183999995203,
    -197.65879999995457,
    -206.73905999989492,
    -164.33083999999394,
    -195.98311999990685,
]
states_list = [
    [0, 4, 1, 2, 1, 2, 1, 2, 3],
    [0, 4, 1, 1, 2, 1, 2, 2, 3],
    [0, 3, 2, 2, 1, 2, 1, 1, 4],
    [0, 3, 2, 1, 2, 1, 2, 1, 4],
    [0, 2, 3, 2, 1, 2, 1, 4, 1],
    [0, 2, 3, 1, 2, 1, 2, 4, 1],
    [0, 1, 4, 2, 1, 2, 1, 3, 2],
    [0, 1, 4, 1, 2, 1, 2, 3, 2],
    [0, 2, 1, 4, 1, 2, 3, 2, 1],
    [0, 2, 1, 3, 2, 1, 4, 2, 1],
    [0, 1, 2, 4, 1, 2, 3, 1, 2],
    [0, 1, 2, 3, 2, 1, 4, 1, 2],
    [0, 2, 1, 2, 3, 4, 1, 2, 1],
    [0, 2, 1, 1, 4, 3, 2, 2, 1],
    [0, 1, 2, 2, 3, 4, 1, 1, 2],
    [0, 1, 2, 1, 4, 3, 2, 1, 2],
]
# [
#     [False, True, False, True, False, True, False, False],
#     [False, True, True, False, True, False, False, False],
#     [False, False, False, True, False, True, True, False],
#     [False, False, True, False, True, False, True, False],
#     [False, False, False, True, False, True, False, True],
#     [False, False, True, False, True, False, False, True],
#     [True, False, False, True, False, True, False, False],
#     [True, False, True, False, True, False, False, False],
#     [False, True, False, True, False, False, False, True],
#     [False, True, False, False, True, False, False, True],
#     [True, False, False, True, False, False, True, False],
#     [True, False, False, False, True, False, True, False],
#     [False, True, False, False, False, True, False, True],
#     [False, True, True, False, False, False, False, True],
#     [True, False, False, False, False, True, True, False],
#     [True, False, True, False, False, False, True, False],
# ]
fake_list = [8, 8, 1, 1, 2, 2, 7, 7, 6, 3, 6, 3, 4, 5, 4, 5]


color_list = [
    (0, 0, 0),
    (0, 0, 1),
    (0, 1, 0),
    (0, 1, 1),
    (1, 0, 0),
    (1, 0, 1),
    (0, 0.5, 0),
    (0.5, 0, 0.5),
    (0.5, 0.5, 0.5),
]
greed_mean_std = [
    (-201.304, 20.60513489400154),
    (-190.7, 26.428734362432113),
    (-203.852, 22.3245626160962),
    (-210.256, 12.607238555686965),
    (-171.028, 18.867729487142853),
    (-196.728, 29.003965521976472),
    (-206.48, 31.973388935175453),
    (-165.064, 17.658196510402753),
    (-194.932, 30.21501904682504),
]
